/**
*Why source control : -backup/archive, versioning/history, undo changes, comparing, collaboration/teamwork, blame/learning moment, isolation of changes, experimentation, context switiching, code review 
*
*Two main types of source control options:
*Centralized: -Free:Subversion, CVS -Commercial: ClearCase, Perforce, Team Foundation Server (TFS) -Requires connection to central server for most operations
*Decentralized/Distributed: Mercurial (Hg), Git, -Most operations are local -Central server not required 
*
*Key Concepts
*Repository contains files, history, config managed by Git
*Four States of git: 1)Working directory, 2)Staging area (precommit holding area), 3)Commit (Git repository history .git), 4)Remote Repository (GitHub)
*Master branch the default branch that git creates when a git repo is created
*  
**/

#Configuring username and email address global environment setting required before starting to use git 
$git config --global user.name "name"
$git config --global user.email "email_address@example.com"
#Shows all the known configuration from global and user level 
$git config --global --list 

#Cloning a repo and git commands
$git clone <github/clone_url>
$git status
$git add . || git add --all
$git commit -m "the comment goes here"
$git push origin master 

#Configuring notepad++ on bash
#Change to user's home dir or check to make sure you are in the user's home dir
$pwd  
$notepad++ .bash_profile 
#In the .bash_profile file add the following alias command 
alias npp='notepad++.exe -multiInst -nosession' 
#Setup notepad++ as default editor within git
#Check the current global configuration by executing the below command 
$cat ~/.gitconfig
$git config --global core.editor "notepad++.exe -multiInst -nosession"
#To verify 
$git config --global --list 
#to test it out
$git config --global -e 

#How to start a new project with source control without any existing source code 
$git init <name_of_project>
$git status 
$git add <file_name>
$git commit -m "message/comment goes here"
git status 

$git clone <git_url>
$git status 
$git commit -m "add comment here"
$git pull origin master  #always do a git pull origin master before pushing your changes to the remote repository it is a best practice 
#The git push command will push any commit from the local repository to the remote repository by reference name as well as the branch you want to push  
$git push origin master  #origin => is a reference to remote git hub repository and master => is the name of the branch 

#Shortcut the add and commit process into one step. This can only be done with files that are being tracked  
$git commit -am "add comment here"
#A tracked file is any file that Git is aware of and tracking actively. That would be any file that has been committed into the Git repository or any file that has been added to the git index or 
#the git staging area to find out if the file is being tracked by git use the below command 
$git ls-files 

#One of the main point of the staging area is that we build up our changes for the commit i.e. we only want to use the "-a" parameter in the commit command when we don't want to add any more changes to
#that commit. When we have a change that may span multiple files then we definitely want to use the staging area  

#will add all the files recursively 
$git add .  # . means add files recursively 

#To unstage
$git reset HEAD <filename>
#To discard changes in working directory
$git checkout -- <filename>

#Renaming a file with git command
$git mv <old_filename> <new_filename>
$git add -A  #-A will recursively add any changes, also update any files that have been renamed, moved or deleted
$git add -u  #Updates the git index 
$git rm <filename.txt>  #Only removes files that are being tracked by git 
$git help <command_name>  #To bring up the help page for the command

##The git log command and various options to see the git history
$git log   #shows commit history in reverse chronological order 
$git log --abbrev-commit  #shortens the sha1 commit id
$git log --all --oneline --graph --decorate 
$git log <rangeA_sha1>...<rangeB_sha1>
$git log --since="3 days ago"  #date based searching  
$git log -- <filename>  #to see the history of a specific file 
$git log --follow -- <path_to_file>  #We can see the commit history of the specific files going through the renames 
$git show <commit_id_sha1>  #To show information about specific commit 

##Git Alias
$git <new_alias_name>  #to check if the git command already exists
$git config --global alias.nameof_alias "full command to be issued leaving out the git part of the command"  #Set a git Alias
Ex git config --global alias.hist "log --all --graph --decorate --oneline" 

###Avoid unwanted files 
$ls -la  #to check to find .gitignore hidden file 
$vim .gitignore 
#The formate for .gitignore is one expression per line:
#Specific File: MyFile.ext
#File Pattern: *.ext
#Folder: my-folder/

###Pushing commit to remote github repository 
$git pull origin master  #Its a best practice to always do a git pull before pushing commits to remote repository
$git push origin master  #pushing the commits to remote repository 

###Configure p4merge merge tool to work with git 
$git config --global merge.tool p4merge 
$git config --global mergetool.p4merge.path "C:\Program Files\Perforce\p4merge.exe"
$git config --global merge.prompt false 

###Configure p4merge diff tool to work with git
$git config --global diff.tool p4merge
$git config --global difftool.p4merge.path "C:\Program Files\Perforce\p4merge.exe" 
$git config --global difftool.prompt false 

###To list out git configuration 
$git config --global --list 
$git config --global -e 

$git diff  #Compares the differences between whats in the local working directory that has been recently modified but not yet staged versus currently staged 
$git difftool 
$git diff HEAD  #Git will compare the difference between the working directory and the last commit on this branch 
$git difftool HEAD  #the git difftool command will use the same parameter as the git diff command
$git diff --staged HEAD  #Compares the staged area to the Git repository at HEAD 
$git difftool --staged HEAD 
$git diff -- <filename_or_path>  #Limiting comparison to one file or path 
$git diff sha1 Head  #Compare between commits 
$git diff HEAD HEAD^  #Compares HEAD and HEAD-1 
$git diff commit_id1 commit_id2 
$git diff master origin/master  #comparing local repository vs remote repository 

###branching 
$git branch -a  #Lists all branches including remote branches
$git checkout master
$git branch -m branchname newbranchname  #to rename the branch 
$git branch -d branchname  #to delete a branch. Use -D to forcefully delete 

$git merge <branch_name> --no-off  #No Fast forward  (--no-ff)
$git merge <branch_name> -m "To enter commit message to auto merging when changes made to both branch and master and mergigng"  #use -m to enter message for merging

###Rebasing 
$git rebase master  #On the branch feature rebase will merge all the changes that has taken place in the master branch and then apply changes of the feature branch on top of it 
$git merge myfeature  #Doing a git merge on master to feature after rebase will result in a fast forward merge 
$git rebase --abort  #to abort a rebase in case of conflicting rebase 
$git rebase --continue  #To resolve rebase conflict  

$git fetch origin master  #Is a non destructive command which updates the references between the remote repository and the local repository 
$git pull --rebase origin master  #This will rebase the changes from remote instead of a regular pull to benefit from changes in remote while keeping local commits at the head 

###Stashing 
$git stash  #to store any changes that is work in progress 
$git stash apply  #apply the changes that was stashed before 
$git stash list   #this will list the stash 
$git stash drop   #this will drop the last stash 

#By default the git stash command will only stash tracked files 

$git stash -u  #-u stashes untracked files 
$git stash pop  #is equvalent to git stash apply and git syash drop 
$git stash save "commit message for stash"  #save is like commit message for stash to diffrentiate between stashes
$git stash show stash@{1}  #To look at a specific stash by the stash index number in side curly braces
$git stash apply stash@{1} #To apply a specific stash  
$git stash drop stash@{1}  #To drop a specific stash 
$git stash clear  #will empty the list of stashes 
$git stash branch <branch_name>  #creates and switch to a new branch apply stash to a new branch and drop stash 

###Tagging 
$git tag myTag  #To create a lightweight tag to create a marker on a particular commit 
$git tag --list 
$git show myTag
$git tag --delete myTag   
#An annotated tag is similar to lightweight tag except it has a little extra information 
$git tag -a v-01.0
$git tag v-1.2 -m "Release 1.2"
$git tag -a v-0.9-beta commit_ID  #To tag a specific commit 
$git tag -a v-0.8-alpha -f commit_ID  #To update a tag 
$git push origin <tag_name>  #to push one specific tag 
$git push origin master --tags  #To push all the tags at once 
$git push origin :<tag_name>  #To delete a tag on remote github repository 

$git diff tag1 tag2
$git difftool tag1 tag2 
#Whenever you issue a tag command it will apply the tag to the current commit 
$git commit --amend  #allows us to amend our commit message 

###Creating and Setting up local and remote branches when the remote branch already exists 
$git fetch origin <branch_name>
$git branch <local_branch_name> origin/<remote_branch_name>
$git checkout <local_branch_name>
$git pull origin <branch_name> 

###Creating and Setting up local and remote branches when the remote branch does not already exists
$git checkout -b <branch_name>
$git push --set-upstream origin <branch_name>

###Time travel *****************************************************
#Going to the history backward
$git log --oneline --graph --decorate --all  #git log only shows us the history 
$git reset head^  #takes one step backward
$git reset head^^  #takes two step backward 
###Going to the future forward 
$git reflog  #git reflog show everything that you have done for the last 60 days  
$git reset <commit_id>   #to go forward 
$git reset HEAD@{n}   #to move the position of the head where n represents the position 
$git log --oneline --graph --decorate --all 


###If you already have code ready to be pushed to this repository then run this in your terminal
cd existing-project
git init
git add --all
git commit -m "Initial Commit"
git remote add origin <git_url>
git push -u origin master

###If your code is already tracked by Git then set this repository as your "origin" to push to.
cd existing-project
git remote set-url origin https://rahmedsd@oneit.wba.com/versioncontrol/scm/cookbooks/wag_k8s-cluster.git
git push -u origin master

$git merge <branchName>  #merging a branch to master branch make sure you are on master branch
$git checkout -b <branchName>
$ git push origin [-d | --delete] <branch_name>  #deletes a remote branch
$ git branch -d <branch_name>  #deletes a local branch