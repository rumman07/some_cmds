/**Key Concepts:
*Recipes are made up of a collection of resources 
*Cookbooks are made up of a collection of recipes 
*Nodes receive their policy based off of roles and individual node configurations
*A run list defines the order in which you want your recipes to run during convergence 
*Configuration drift occurs when the desired state of the node does not match the desired state as defined in the policies on the chef server 
*Configuration drift can be resolved by automating/running the chef-client agent 
*
*
*
###To install chefdk on OSX and Linux run the following command: 
$curl -L https://www.opscode.com/chef/install.sh | sudo bash   #walgreens 
$curl -s https://omnitruck.chef.io/install.sh | sudo bash -s -- -P chefdk  #linuxacademy 
###Setup shell environemnt in ~/.bash_profile so that default ruby interpreter is the chef embeded ruby interpreter not the system ruby interpreter
$echo 'eval "$(chef shell-init bash)"' >> ~/.bash_profile 
$source ~/.bash_profile 
$which chef 
$which ruby 
###Quick sanity check to make sure chef was installed and configured correctly 
$chef -v 
###Intalling and configuring some packages for chef workstation 
$yum install -y git yum-utils
#Configure git 
$git config --global user.name "Rumman Ahmed"
$git config --global user.email "rummanahmed.**@gmail.com"
$git config --global core.editor vim 
$git config --global color.ui auto 
###Install and configure docker 
$yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo  #Invoking yum config manage to add a repo
$yum makecache fast 
$yum list docker-ce --showduplicates | sort -r
$yum install -y docker-ce 
$systemctl enable docker 
$systemctl start docker 
$usermod -aG docker $USER 
###Disbale services to not run systemd inside of a container 
$systemctl stop getty@tty1.service 
$systemctl mask getty@tty1.service 
#In order to complete the configuration log out and log back in 
###Configure docker 
$docker network create --subnet=10.1.1.0/24 testnet  #create a network for docker 
$gem install kitchen-docker  
*Versionable - Testable - Repeatable - Collaborative
*
*A resource statement defines the desired state of the configuration, a resource maps to a "provider" which defines the steps to achieve that desired 
*state of configuration. When you write your code, you use resources to describe your infrastructure. A resource corresponds to some piece of 
*infrastructure, such as a file, a template, or a package
*An application cookbook typically contains multiple recipes, where each recipe configures one part of the system. The default recipe, default.rb, lists these recipes in 
*the order needed to build your application or service
*A Chef recipe is a file that groups related resources, such as everything needed to configure a web server, database server, or a load balancer
*A Chef cookbook provides structure to your recipes and, in general, helps you stay organized. The Chef DK includes other command line tools for 
*interacting with Chef. These include knife for interacting with the Chef server, and chef for interacting with your local chef code repository (chef-repo)
*
*Once you’re done developing and testing code on your local workstation, you can upload it to the Chef server. The Chef server acts as a hub for 
*configuration data. It stores cookbooks, the policies that are applied to the systems in your infrastructure and metadata that describes each system 
*The knife command lets you communicate with the Chef server from your workstation
*
*An attribute is the specific detail about the node. An Attribute allows us to define information about something 
*Attribute levels of precedence : Attribute file; Node/recipe; Environment; role 
*default : Automatically reset at the start of every chef client run is the lowest level of precedence; 
*force_default : Used in a cookbook or recipe to override an existing "default" attribute; 
*normal : A setting that persists in the node object; 
*override : Automatically reset at the start of every chef client most often should be used only when required;
*force_override : used to ensure that an attribute defined in a cookbook (by an attribute file or by a recipe) takes precendence over an override attribute set by a role or an environment;
*automatic : Contains data populated by ohai at the begining of every chef-client run and cannot be modified and always has the highest attribute precendence; 
*
*In Chef code, you'll often see the ::File notation. The colon :: notation specifies use of the core Ruby File class
*The Chef::Resource::File class also exists to implement the file resource
*
*A wrapper cookbook extends or changes the behavior of a cookbook without forking it 
*
*The <%= %> notation indicates placeholders that are replaced when Chef applies the template
*<% if @port == 80 -%>  # - means suppress the line break after the ruby evaluation
*
*Because Chef loads dependent cookbooks first, the values specified in the current cookbook's attributes file will overwrite any existing attribute values
*Ohai is used to detect attributes on a node and report them to chef client at the start of every chef client run as well as at the end of every
*chef client run. It is required for the chef client to run because it builds the node object 
*Chef client is an agent that runs locally on every single nodes that is registered with the chef server 
*Policy is a collection of system configurations that you define ex: roles, data bags, environments. The policy states the state that 
*each resources should be in but not how to get there. Chef-client will pull the policy and configure the node so that it matches the state of the policy 
*
* Resources: Defines the desired state for a single configuration item present on a node that is under management by chef. Does the 
*configuration on a node and maps to providers. Resources represent a piece of the system and its desired state
*When chef client is run on a node the resource is executed by the provider which is handled by chef and the OS itself  
*
*Node object is made up of the run lists which define what recipes to run during a chef-client as well as the attributes that define information about the node 
*Chef search allows queries to be made for any type of data that is indexed by the chef server. Search queries the chef server for stored information 
*A data bag is a global variable that is stored in JSON data and accessible from the chef server. A data bag is indexed for searching and can be loaded by a recipe or access during search 
*An environment is a way to map an organizations real-life workflow to what can be configured and managed using the chef server
*
*The primary testing tools you’ll use are Cookstyle, Foodcritic, ChefSpec, InSpec, and Test Kitchen. With them, you can make sure your Chef code does 
*what you intended before you deploy it to environments used by others, such as staging or production
*
*Chef Automate gives you a full-stack continuous deployment pipeline, automated testing for compliance and security, as well as visibility into 
*everything that’s happening as you move your applications and infrastructure through the pipeline and then when they’re in production
* 
*/

#In the node in client.rb adding the info log level configuration
log_level :info

#Notify and subscribe
notifies :action, 'resource[name]', :timer
subscribes :action 'resource[name]', :timer

#Installing the chef server******************************************************************************************************
$wget
$rpm -Uvh <chef-server-package-name>
$dpkg -i <chef-server-package-name>
$chef-server-ctl reconfigure
#Creating a user in the chef server
$chef-server-ctl user-create username firstname lastname eamail@email.com 'password' --filename <username>-user-rsa
#Creating an organization in the chef server 
$chef-server-ctl org-create <org-short-name> <'ORG fullname'> --association_user <username> --filename <org-short-name>-validator.pem
#Install GUI based interface it is rails application called chef manage
$chef-server-ctl install chef-manage 
$chef-manage-ctl reconfigure
**********************************************************************************************************************************

#Restarting the chef server
Chef-manage-ctl stop
Chef-server-ctl stop
Chef-server-ctl start
Chef-manage-ctl reconfigure
Chef-manage-ctl start


#Downloading the starter kit
$scp chef-starter.zip user@<ipaddress>:~/
$ssh user@<ipaddress>
$su #change to root user
$yum install unzip
$usermod -g wheel user #changing the user@user primary group to wheel group 
$exit
$sudo unzip chef-starter.zip
$rm -rf chef-starter.zip
$sudo knife ssl fetch
$knife bootstrap <ipaddress> --ssh-user <username> -P <password> --sudo -N <fqdn>


#Using git and github with chef-repo
$sudo chown user.user -R .
$git init
$git add .
$git status
#Please tell me who you are RUN the below commands to set your account's default identity
#Omit --global to set the identity only in the repository  
$git config --global user.email "email@example.com"
$git config --global user.name "username"
$git commit -am "Adding chef-repo to git"
$git remote add origin <https://url>
$git push -u origin master  #to push commits made on your local branch to a remote repository. Git push command takes two arguments
$git push <REMOTENAME> <BRANCHNAME>
$echo "#these are all the commands to run" >> README.md #this is to create the readme file later on
$git add README.md #this is to add the readme file creared later on to the github repository
$git add --all
$git add <fileName>
$git push --set-upstream origin <branchname> #pushing changes to the branch created
$git clone <url>
#Creating and switching branches
$git branch <branchName>  #creating a new branch
$git checkout <branchName>  #switching to a different branch
$git branch #to show on what branch you are currently working
<<<<<<< HEAD
$git merge <branchName>  #merging a branch to master branch make sure you are on master branch and after merging do git "push origin master" to see the changes takes affect in the master branch
=======
###If you already have code ready to be pushed to this repository then run this in your terminal
cd existing-project
git init
git add --all
git commit -m "Initial Commit"
git remote add origin <git_url>
git push -u origin master

###If your code is already tracked by Git then set this repository as your "origin" to push to.
cd existing-project
git remote set-url origin https://rahmedsd@oneit.wba.com/versioncontrol/scm/cookbooks/wag_k8s-cluster.git
git push -u origin master

$git merge <branchName>  #merging a branch to master branch make sure you are on master branch
$git checkout -b <branchName>
$ git push origin [-d | --delete] <branch_name>  #deletes a remote branch
$ git branch -d <branch_name>  #deletes a local branch
>>>>>>> fc69a6a52a73dfcadeffebf177f06d326cbc78a2

#pre convergence items
$chef exec ruby -c /path/to/file
$ruby -c /path/to/file #directly checking for syntax error
$foodcritic /path/to/file
$ruby -c learn.rb && foodcritic learn.rb

###chef generate command
#Generators are used to quickly generate cookbooks or components of a cookbook. Generator are invoked by using the chef generate command. Execute $chef generate to see what chef generate can create
#Using $chef generate generator <name_of_generator> will create a copy of the ChefDK generator which we can use to customize to our specifications
#Generating a generator will help enforce standards on the contents of a newly created cookbook or cookbook component to ensure it meets organiztional requirments
#Use cases for generators include: 1)Boilerplate text in README or generated recipes, 2)Default licensing choice, 3)Commonly used code 
$chef generate cookbook <cookbooks_dir>/<cookbook_name>
$chef generate recipe cookbooks/apache <name_of_recipe_without_.rb>
$chef generate attribute cookbooks/lamp <name_of_attrbute_without_.rb>   #the name of the default attribute is default.rb 
$chef generate template <path_to_cookbook> <name_of_template_without_.erb>
$chef generate file cookbooks/<cookbook_name> <name_of_file>
###Generate a generator cookbook using chef generate:
$mkdir generator    #create a dir to house the generator cookbook 
$chef generate generator <path_to_generator_dir>/<name_of_generator_cookbook>
#configure these files: under tepmplares readme kitchen.yml and under files spec_helper and create .chef/config.rb  content_of_config.rb as below: 
cookbook_path ['~/chef/cookbooks'] 
local_mode true
if File.basename($PROGRAM_NAME).eql?('chef') && ARGV[0].eql?('generate')
  chefdk.generator.license = "all_rights"
  chefdk.generator.copyright_holder = "Student Name"
  chefdk.generator.email = "you@example.com"
  chefdk.generator_cookbook = "~/generator/lcd_origin"
end


$sudo chef-client -z -r "recipe[cookbook1],recipe[cookbook2],recipe[cookbook3]"
$chef-client -W | chef-client --why-run #the -W options runs the chef-client as it would except prevents it from actualling enforcing the configuration on the node
$chef-client -o "recipe[mycookbook@0.1.1]"  #-o RUN_LIST_ITEM, --override-runlist RUN_LIST_ITEM Replace the current run-list with the specified items. This option will not clear the list of cookbooks (and related files) that is cached on the node. This option will not persist node data at the end of the client run.New in Chef Client 12.0
$chef-client -l debug 


#knife bootstrapping a node
$knife bootstrap fqdn -x <username> -P <password> -N <nodeName> 
$knife bootstrap <ipaddress> -x <user> -P <password> -N <nodeName> --sudo
$knife bootstrap localhost --ssh-port 2222 --ssh-user vagrant --sudo --identity-file <path/to/file/private_key> -N <name_of_node>
#Knife commands
$knife node list 
$knife node run_list add node_name -b "recipe[apache]" "recipe[security]"
$knife node run_list add <nodeName-N> 'recipe[<cookbookname>::<recipename>]' -b 'recipe[<cookbookname>]'
$knife node run_list add <nodeName_N> 'recipe[<cookbookname>::<recipename>]' -a 'recipe[<cookbookname>]'
$knife node run_list remove <nodeName-N> 'recipe[<cookbookname>::<recipename>],recipe[<cookbookname>]'
$knife node run_list add web1 "recipe[workstation],recipe[apache]"
$knife node run_list set load-balancer "recipe[workstation],recipe[apache]"
$knife node run_list set load-balancer "recipe[cookbook_name::recipe_name@cookbook_version]"  #explicitly specify a cookbook version to use in a nodes run_list
$knife cookbook upload <cookbook_name>
$knife cookbook delete <cookbook>@<version>   #to remove specific version of cookbook
$knife cookbook create <cookbook_name>
$knife supermarket show httpd | grep latest_version #gets the version information 



#Knife Exec Commands
$knife exec -E "nodes.find('recipes:wag_ilmt'){|n| puts n.name}"


#All the knife search command. If no search index is specified the default index is node  #Reference: https://docs.chef.io/knife_search.html 
#INDEX is one of client, environment, node, role, or the name of a data bag and SEARCH_QUERY is the search query syntax for the query that will be executed.
$knife search 'platform_family:rhel'
$Knife search 'recipes:apache'
$knife search 'recipes:apache\:\:websites'  
$knife search node 'platfor?:centos'
$knife search '*:*' #pulls all the node registered with the chef server 
$knife search '*:*' -a ipaddress 
$knife search role 'role:web' -a run_list 
$knife node show <nodeName> -a run_list, -a ipaddress  #This to show more than one attribute using the -a option 


#####Creating roles with knife
$knife role show <roleName>
$knife role list -w 
$knife role create <rolename>
$knife role edit <rolename>
#uploading roles to chef server
$knife role from file roles/web.rb
$knife node run_list set web1 "role[web]"
$knife node run_list add centos7node "role[rolename]"


#####Creating environment with knife 
$knife environment create ENVIRONMENT_NAME -d DESCRIPTION
$knife environment list
$knife environment show <nameofenvironment>
$knife environment from file <environments_dir>/<env_name.rb>
$knife node environment set <node_name> <env_name>
$knife environment list -w  # w option shows the api url for the environment 
$knife environment delete <env_name>
$knife environment compare dev prod  #compare information about environments 
$knife environment compare dev 
$knife environment compare --all  #Compare all cookbook required version against all environment 

###Creating Data Bags**********************
$mkdir data_bags  #create a directory in the chef-repo called data_bags/users/julia
$mkdir {users,groups}  #Inside the data_bag create data bag directory
$vi ./users/username.json
$vi ./groups/groupname.json
$knife data bag create users 
$knife data bag create groups 

$knife data_bag from file users username.json 

knife data bag list   #shows a list of all the available data bags 
knife data bag show <data_bag_name>  #shows the items in a particular data bag 
knife data bag show <data_bag_name> <bata_bag_item_name>  #shows the content of a particular data bag item 

#generate secret keys
$ openssl rand -base64 512 | tr -d '\r\n' > secret-key
#creating encrypted data bag
$knife data bag create secret-users --secret-file secret-key 
#uploading encrypted data bag item
$knife data bag from file secret-users data_bags/users/julia.json --secret-file secret-key
#decrypt encrypted data bag items
$knife data bag show secret-users julia --secret-file secret-key


#The knife ssh command
$knife ssh <ipaddress/fqdn/localhost> 'sudo chef-client' --manual-list --ssh-port 2222 --ssh-user vagrant 
--identity-file C:/users/rumman/devops_projects/chef-training/chef-repo/.vagrant/machines/web1/virtualbox/private_key
$knife ssh "*:*" -x <username> -P <password> "sudo chef-client"
$knife ssh "role:web" -x chef -P chef "sudo chef-client"
$knife ssh "role:web" "sudo chef-client" -x <username> -P <password>
$knife ssh "role:<rolename>" "type command to run" -x <username> -P <password>
###1 node found, but does not have the required attribute to establish the connection. Try setting another attribute to open the connection using --attribute.
knife ssh 'node_name:k8s-agent02' -x wagsadmin -i ..\..\..\..\.ssh\id_rsa "sudo chef-client" -a ipaddress 10.217.10.229 #-a ipaddress 10.217.10.229 sets the ipaddress attribute 

#Syntax for knife search index
$knife search INDEX (client, node, role, environment, data_bags) "key:value"
$knife search node "role:web AND recipes:apache"

/**########################################Chef Knife Tagging#####################################################
*knife tag - A tag is a custom description that is applied to a node  A tag, once applied, can be helpful when managing nodes using knife or when building 
*recipes by providing alternate methods of grouping similar types of information
*The knife tag subcommand is used to apply tags to nodes on a Chef server
*/
#syntax to create tag
$knife tag create NODE_NAME [TAG...]
#To create tags named seattle, portland, and vancouver, enter:
$knife tag create node seattle portland vancouver
#syntax to delete tag - This command does not have any specific options
$knife tag delete NODE_NAME [TAG...]
#To delete tags named denver and phoenix, enter: - Type Y to confirm a deletion
$knife tag delete node denver phoenix
#The list argument to list all of the tags that have been applied to a node - syntax - This command does not have any specific options
$knife tag list [NODE_NAME...]
#To view the tags for a node named devops_prod1, enter:
$knife tag list devops_prod1

###############Knife Reporting and managing the chef server******************************************************************************************************
####To install: chef exec gem install knife-cleanup
####To install: chef exec gem install knife-reporting
$knife cleanup versions  #List all the cookboks are in the chef server but not being used 
$knife cleanup versions -D   #first a backup of the version and then proceed to delete it
$knife cleanup -B (--backup)

$knife runs list <nodeName>   # return a list of chef-client runs by organization or by node
$knife runs list   #returns a list of every chef-client run that took place across every single node in the organization
$knife runs show <runID>  #returns the details for a chef-client run

#knife Status Commands: 
$knife status -H (--hide-healthy)  #Hide nodes on which a chef-client run has occurred within the previous hour
$knife status --hide-by-mins <MINS=30>
$knife status --run-list  #To include run-lists in the status
$knife status "role:web" --run-list
$knife status  #To view the status of all nodes in the organization



$r = Get-NodeStatus -Node pld-awurxms01.walgreens.com
$r
$s = Get-RunStatus $r.RunId
$s
$Get-PrettyErrorInfo -ErrorDetails $s.ErrorDetails
$Import-Module ..\..\Documents\WindowsPowerShell\Modules\Functions-ChefHelpers\Functions-ChefHelpers.psm1 -Force
$Get-PrettyErrorInfo -ErrorDetails $s.ErrorDetails

*******************************Converting Knife output to PSObject*************************************************************
$a = PSknife status -H -F json
$b = $a -Join "`n" | ConvertFrom-Json 
$b | Get-Member 
********************************************************************************************************************************

#some ohai commands
ohai
ohai ipaddress
ohai hostname
ohai memory
ohai memory/total
ohai cpu/0/mhz
ohai fqdn 

**********Running Test Kitchen********************************************************************
=begin 
*Test kitchen provides an automated testing framework for your cookbooks across different platforms
*and offers a driver plugin architecture to ensure your code can be tested on as many platforms 
*as you need. Test suites help you extend and differentiate your tests allowing for complex 
*combination of tests to occur.
*Configuration for test kitchen is defined in a .kitchen.yml file which is YAML formatted 
*The .kitchen.yml file contains specific syntax to configure the requirements for handling your 
*test cases: 
*Drivers are used to create the platform instances which are used during cookbook testing
driver: 
     name: driver_name 
*provisioner: Provisioner specify how the chef-client will be simulated during the testing process
*the most commmon configurations are chef-zero and chef-solo. Key functionality of the chef_zero
*and chef_solo provisioner is the ability to use the require_chef_omnibus setting to install a
*specific chef version
provisioner:
     name: provisioner_name   #it can be name: chef_zero || name: chef_solo
	 require_chef_omnibus: 12.8.1
*Shell provisioner
provisioner:
    name: shell
*The verifier configuration defines which test framwork will perform tests	 
verifier:   
   name: inspec 
*Transport defines the communication protocol for the execution of remote commands. Among other 
*things, transport settings can include things like username, password, connection retries or port 
transport:
   name: transport_name    #it can be name: ssh || name: winrm 
*Platforms defines chef server attributes that are common to the collection of test suites
*The platform_version defines the list of operating system and version on which kitchen will 
*perform cookbook testing  
platform: 
   name: platform_version
*Suites is a list of a group of tests which allow the granular combinations of run_lists and platforms
*to define what is being tested 
=end 
#Install the docker and azure test kitchen plugin
$chef exec gem install kitchen-docker 
$chef exec gem install kitchen-azurerm

$vi .kitchen.yml
$kitchen discover driver 
$kiitchen init #Creates a boilerplate .kitchen.yml which we use to run our tests
$kitchen list  #List all instances docker containers; ec2 instances; virtual machines
$kitchen status  
$Kitchen create  #Creates one or more instances   
$kitchen converge #Converge one or more instances 
$kitchen verify   #Verify one or more instances this runs the test whether the test passed or failed
$kitchen destroy  #Destroy one or more instances 
$kitchen test   #Executes kitchen { destroy, create, converge, verify, destroy }/all-in-one
$kitchen login  #login to one instances
$kitchen help   #Provides a list of available kitchen commands 
$kitchen exec -c whoami #prints the name of the current user
$kitchen exec -c 'ip a s'  #if the command is not a single word 'enclose it within single quote'
$vi test/smoke/default/default_test.rb

###ChefSpec:Provides the ability to quickly test the validity of Chef code with a simulated convergence locally in-memory
#without runnig a virtual machine. ChefSpec test can simulate node attributes and operating systems and can work with search
#results to provide flexibility in testing scenarios.
$chef exec rspec --color -fd  
$chef exec rspec spec/unit/recipes/install_pip_spec.rb
$rspec --init   #to enable color 
$cat .rspec 
####Sample chefspec test syntax:
require 'spec_helper'

describe 'lcd_web::default' do
  context 'Centos' do
    let(:chef_run) do
      # for a complete list of available platforms and versions see:
      # https://github.com/customink/fauxhai/blob/master/PLATFORMS.md
      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '7.2.1511')
      runner.converge(described_recipe)
    end

    it 'converges successfully' do
      expect { chef_run }.to_not raise_error
    end

    it 'installs httpd' do
      expect(chef_run).to install_package('httpd')
    end

    it 'enables the httpd service' do
      expect(chef_run).to enable_service('httpd')
    end

    it 'starts the httpd service' do
      expect(chef_run).to start_service('httpd')
    end

  end
end



####Chef Inspec and Compliance####################################
$inspec compliance login https://chef-compliance.walgreens.com --insecure --user='rahmedsd' --token='<>'
$inspec compliance login https://chef-compliance.walgreens.com --insecure --user='walgreenco-sandbox' --token='<>'
$inspec compliance profiles 
$inspec compliance download cis/cis-rhel6-level2
$inspec compliance upload <path_to_profile>
#bootstrap node for compliance 
$knife bootstrap 10.217.10.229 -N k8s_agent01 -x wagsadmin -i ..\..\.ssh\id_rsa --yes --sudo --use-sudo-password --run-list "recipe[profile_wag_infrastructure_baseline],recipe[wag_audit],recipe[wag_os_hardening]" --bootstrap-url http://172.31.207.211/install.sh


#******Adding soft dependencies of cookbooks********************************************
source 'https://supermarket.chef.io'  #in the Berksfile file
metadata 
#
# Kitchen ONLY includes, comment out before upload
#
cookbook 'wag_sshd', path: '../wag_sshd'
cookbook 'wag_access_sysadmin', path: '../wag_access_sysadmin'
cookbook 'wag_ldap_integration', path: '../wag_ldap_integration'
cookbook 'nsswitch', path: '../nsswitch'
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
suites:            #in the .kitchen.yml file
  - name: default
    run_list:
      - recipe[wag_access_tivoli::default]
      - recipe[wag_sshd::default]
      - recipe[wag_ldap_integration::default]
    verifier:
      inspec_tests:
        - test/smoke/default
    attributes:
	
****************************************************************************************	
	
/**
*Adding an ip address and proxy server url variable to a test instance in the kitchen.yml file
*/
driver:
  name: vagrant
  network:
     - ["private_network", {ip: "192.168.34.34"}]
  driver_config:
  https_proxy: http://corppac.walgreens.com:8080
  http_proxy: http://corppac.walgreens.com:8080
	
	
	
**********************************TroubleShootingBootStrappedNodes********************************************
###In the /etc/chef/client.rb #add the following 
node_name "the name of the node"
ssl_ca_file "Z			
chef_server_url "plin-w2cf0404.walgreens.com"   --change it to this from ipaddress: 172.31.207.210
	
#The request failed because your clock has drifted by more than 15 minutes. Syncing your clock to an NTP Time source should resolve the issue. Syncing your clock to an NTP Time source should resolve the issue.	
$cat /etc/ntp.conf   #check for the ntp server names
$sntp -P no -r <nnm02.walgreens.com>
$ntpdate <nnm02.walgreens.com> 


#Besclient stop hung simple kill the service by pid by executing the following commands:
ps -Aef | grep -i besclient
kill -9 pid 
#Forcing the installation of old BESClient package 
$rpm -Uvh --oldpackage /var/chef/cache/BESAgent-9.5.6.63-rhe5.x86_64.rpm

#Wag_Bootstrap command 
knife bootstrap plp1-dz1-nw.walgreens.com -N plp1-dz1-nw.walgreens.com -x rahmedsd -P "**********" --yes --sudo --use-sudo-password --run-list "recipe[wag_chef_client]" --bootstrap-url http://172.31.207.211/install.sh --bootstrap-version 12.13.37 --tags kube-member,Patch -E production
knife bootstrap plp1-dz1-nw.walgreens.com -N plp1-dz1-nw.walgreens.com -x root --yes --run-list "recipe[wag_chef_client]" --bootstrap-url http://172.31.207.211/install.sh --bootstrap-version 12.13.37 -E production

subscription-manager register --org='Walgreens' --activationkey='AK_RHEL_Canary' --force

#relocation error: file /opt/chef/embedded/lib/ruby/2.1.0/sparc-solaris2.10/openssl.so: symbol EC_GROUP_new_curve_GFp: referenced symbol 
#not found - /opt/chef/embedded/lib/ruby/2.1.0/sparc-solaris2.10/openssl.so (LoadError)
$LD_LIBRARY_PATH=/opt/chef/embedded/lib/ruby/2.1.0/sparc-solaris2.10/openssl.so chef-client  #fix for the above issue some missing env variable

###Could not get lock /var/lib/dpkg/lock
lsof /var/lib/dpkg/lock    #First run
ps cax | grep PID          #Then make sure that process isn't running
kill -9 PID                #If it is running
ps cax | grep PID          #Make sure process is done
sudo rm /var/lib/dpkg/lock #Then remove the lock file
sudo dpkg --configure -a   #Let dpkg fix itself
*********************************Deleting node from the chef server**********************************************
#Bootstrapping a node not only installs Chef on that node, but creates a client object on the Chef server as well. Running the Chef client on your node 
#uses the client object to authenticate itself against the Chef server on each run. Additionally, to registering a client, a node object is created on 
#the Chef server. The node object is the main data structure, which you can use to query node data inside your recipes

#Step1: Delete the node object: 
$knife node delete --yes node_name 

#Step2: Delete the client object: 
$knife client delete --yes my_node 
	
	
$yum remove chef -y 
$rm -rf /etc/chef
$rm -rf /var/chef
$rm -rf /opt/chef
rm -rf /var/log/chef 
	
###Downgrading chef-client version on ubuntu 
$curl -L http://chef-mart.walgreens.com/install.sh | bash -s -- -v 12.13.37
	
****************Ruby code for recipes examples*******************************************
#String interpolation and inserting node attributes inside a recipe
node['ipaddress']
node['memory']['total']
apple_count = 4
puts "I have #{apple_count} apples"

file '/etc/motd' do
  content "This computer is the property of RAR
  HOSTNAME: #{node['hostname']}
  IPADDRESS: #{node['ipaddress']}
  CPU: #{node['cpu']['0']['mhz']}
  MEMORY: #{node['memory']['total']}
"
end


#Explicitly defining the name of the service to take the action on by assign the name of the service to a variable

service 'apache' do
    service_name 'httpd'
    action [:enable, :start]
end

#Installing multiple package at one time 

%w{httpd vim tree emacs}.each do |pkg|
    package pkg do
	   action :upgrade
	end
end
#Another way of installing multiple package at one time

['mysql-server','mysql-common','mysql-client'].each do |pkg|
    package pkg do
	  action :install
	end
end 

#NOT_IF & ONLY_IF Guards Statement
#The execute resource type by default is not idempotent so we can make it idempotent 
#by defiining the only_if and not_if guard statement

#NOT_IF -prevents a resource from executing when a condition returns true

execute 'not-if-example' do
    command '/usr/bin/echo "10.0.2.1 webserver01" >> /etc/hosts
	not_if 'test -z $(grep "10.0.2.1 webserver01" /etc/hosts)'
	not_if { ::File.exists?('/etc/motd') } #using ruby class and method to test for file
end 

execute "rm /etc/httpd/conf.d/READEME" do
  only_if do
    File.exists?('/etc/httpd/conf.d/READEME')
  end
  notifies :restart, "service[httpd]", :immediately
end

#ONLY_IF -Allow a resource to execute only if the condition true

execute 'only-if-example' do
    command '/usr/bin/echo "10.0.2.1 webserver01" >> /etc/hosts'
    only_if 'test -z $(grep "10.0.2.1 webserver01" /etc/hosts)'
    only_if { ::File.exists?('/etc/motd') } #using ruby class and method to test for file
end
#****************learn.rb************************************************************
package 'apache' do
   package_name 'httpd'
end

service 'httpd' do
  action [:enable, :start]
end

file '/var/www/index.html' do
  action :delete
end

file '/var/www/html/index.html' do
  content 'Hello World!'
  mode '0755'
  owner 'root'
  group 'apache'
end

execute 'command-test1' do
  command 'echo blah >> /etc/motd'
  only_if { ::File.exists?('/etc/motd') }
end

file '/etc/motd' do
  content "Welcome to my server!"
end

#execute 'command-test' do
#  command 'echo blah >> /etc/motd'
#  only_if 'test -r /etc/motd'
#end


#****************************Installing/Tomcat/Recipe******************
#
# Cookbook:: tomcat
# Recipe:: default
#
# Copyright:: 2017, The Authors, All Rights Reserved.
package 'java-1.7.0-openjdk-devel' do
        action :install
end

#sudo groupadd tomcat
group 'tomcat' do
    action :create
end

#sudo useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat
user 'tomcat' do
    manage_home false 
    shell '/bin/nologin'
    group 'tomcat'
    home '/opt/tomcat'
end 

execute 'wget http://apache.mirrors.ionfish.org/tomcat/tomcat-8/v8.5.14/bin/apache-tomcat-8.5.14.tar.gz' do
    not_if { ::File.exists?('apache-tomcat-8.5.14.tar.gz') }
end

#remote_file 'apache-tomcat-8.0.43.tar.gz' do
      #source 'http://apache.mirrors.ionfish.org/tomcat/tomcat-8/v8.0.43/bin'
#end

directory '/opt/tomcat' do
    action :create
    group 'tomcat'
end

execute 'tar xvf apache-tomcat-8.5.14*tar.gz -C /opt/tomcat --strip-components=1'
#execute 'extracting-tar' do
     #command 'gunzip apache-tomcat-8.5.14*tar.gz'
     #command 'tar xvf apache-tomcat-8.5.14*tar -C /opt/tomcat --strip-components=1'
#end
 
 execute 'chgrp -R tomcat /opt/tomcat/conf*'

 directory '/opt/tomcat/conf' do
     mode '0070'
 end 

execute 'chmod g+r /opt/tomcat/conf/*'

execute 'chown -R tomcat /opt/tomcat/webapps/ /opt/tomcat/work/ /opt/tomcat/temp/ /opt/tomcat/logs/'

template '/etc/systemd/system/tomcat.service' do 
    source 'tomcat.service.erb'
end

execute 'systemctl daemon-reload'

service 'tomcat' do
    action [:enable, :start]
end
**************************************************************************************************************************
  describe file('/etc/sudoers') do
  it { should be_mode 440 }
end

